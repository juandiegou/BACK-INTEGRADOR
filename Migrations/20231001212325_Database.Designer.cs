// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231001212325_Database")]
    partial class Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Api.Models.parameters.CohortModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<bool>("Agreement")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HasAgreement");

                    b.Property<int>("Modality")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Modality");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartDate");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.Property<int>("periods")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Periods");

                    b.HasKey("Id");

                    b.ToTable("Cohort");
                });

            modelBuilder.Entity("Api.Models.parameters.DiscountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT")
                        .HasColumnName("Cost");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Percentage");

                    b.Property<int?>("StudentModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("StudentModelId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.ExpenseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int?>("CohortModelId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("total")
                        .HasColumnType("REAL")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.HasIndex("CohortModelId");

                    b.ToTable("Expense");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Api.Models.parameters.LeaderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("Leader");
                });

            modelBuilder.Entity("Api.Models.parameters.ProgramModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Modality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Api.Models.parameters.RegistrationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("Amount");

                    b.Property<int?>("CohortModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CohortModelId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegistrationModel");
                });

            modelBuilder.Entity("Api.Models.parameters.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Code");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Api.Models.parameters.SubjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("Modality")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Modality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("RegistrationModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationModelId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectModel");
                });

            modelBuilder.Entity("Api.Models.parameters.TeacherModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("LeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("ProgramModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("ProgramModelId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.FixedExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.ExpenseModel");

                    b.Property<string>("Criterion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Criterion");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Quantity");

                    b.Property<string>("TypeCost")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TypeCost");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitValue");

                    b.ToTable("FixedExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.RecurrentCostModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.ExpenseModel");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("TEXT")
                        .HasColumnName("HourlyRate");

                    b.Property<int>("NumberHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitName");

                    b.ToTable("RecurrentCost");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.ExpenseModel");

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceCost");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceName");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceType");

                    b.ToTable("ServiceExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.SpecialExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.ExpenseModel");

                    b.Property<decimal>("CostService")
                        .HasColumnType("TEXT")
                        .HasColumnName("CostService");

                    b.Property<string>("DescriptionService")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DescriptionService");

                    b.Property<decimal>("PercentageService")
                        .HasColumnType("TEXT")
                        .HasColumnName("PercentageService");

                    b.Property<string>("TypeService")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TypeService");

                    b.ToTable("SpecialExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.TravelExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.ExpenseModel");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Destination");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumberPeople");

                    b.Property<decimal>("TransportCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("TransportCost");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("TravelCost");

                    b.Property<int>("numberTravel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumberTravel");

                    b.ToTable("TravelExpense");
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.GeneralExpenseModel", b =>
                {
                    b.HasBaseType("API.Models.parameters.Expenses.Fixed.FixedExpenseModel");

                    b.ToTable("GeneralExpense");
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.OtherExpenseModel", b =>
                {
                    b.HasBaseType("API.Models.parameters.Expenses.Fixed.FixedExpenseModel");

                    b.ToTable("OtherExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Services.OtherServiceNonTeachingStaff", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel");

                    b.Property<int>("QuantityService")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuantityService");

                    b.Property<decimal>("UnitCostService")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitCostService");

                    b.ToTable("OtherServiceNonTeachingStaff");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Services.OtherServiceTeachingStaff", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel");

                    b.Property<decimal>("CostHourlyService")
                        .HasColumnType("TEXT")
                        .HasColumnName("CostHourlyService");

                    b.Property<string>("DescriptionService")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DescriptionService");

                    b.Property<int>("NumberHoursService")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumberHoursService");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TeacherName");

                    b.Property<string>("TypeCostService")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TypeCostService");

                    b.ToTable("OtherServiceTeachingStaff");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.InvestmentExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.Special.SpecialExpenseModel");

                    b.ToTable("InvestmentExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.TransferExpenseModel", b =>
                {
                    b.HasBaseType("Api.Models.parameters.Expenses.Special.SpecialExpenseModel");

                    b.ToTable("TransferExpense");
                });

            modelBuilder.Entity("Api.Models.parameters.DiscountModel", b =>
                {
                    b.HasOne("Api.Models.parameters.StudentModel", null)
                        .WithMany("Discount")
                        .HasForeignKey("StudentModelId");
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.ExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.CohortModel", null)
                        .WithMany("Expense")
                        .HasForeignKey("CohortModelId");
                });

            modelBuilder.Entity("Api.Models.parameters.RegistrationModel", b =>
                {
                    b.HasOne("Api.Models.parameters.CohortModel", null)
                        .WithMany("Registration")
                        .HasForeignKey("CohortModelId");

                    b.HasOne("Api.Models.parameters.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Api.Models.parameters.SubjectModel", b =>
                {
                    b.HasOne("Api.Models.parameters.RegistrationModel", null)
                        .WithMany("Subject")
                        .HasForeignKey("RegistrationModelId");

                    b.HasOne("Api.Models.parameters.TeacherModel", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Api.Models.parameters.TeacherModel", b =>
                {
                    b.HasOne("Api.Models.parameters.LeaderModel", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.parameters.ProgramModel", null)
                        .WithMany("Teachers")
                        .HasForeignKey("ProgramModelId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.FixedExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.ExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("API.Models.parameters.Expenses.Fixed.FixedExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.RecurrentCostModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.ExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.RecurrentCostModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.ExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.SpecialExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.ExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Special.SpecialExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.TravelExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.ExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.TravelExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.GeneralExpenseModel", b =>
                {
                    b.HasOne("API.Models.parameters.Expenses.Fixed.FixedExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("API.Models.parameters.Expenses.Fixed.GeneralExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.parameters.Expenses.Fixed.OtherExpenseModel", b =>
                {
                    b.HasOne("API.Models.parameters.Expenses.Fixed.FixedExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("API.Models.parameters.Expenses.Fixed.OtherExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Services.OtherServiceNonTeachingStaff", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Services.OtherServiceNonTeachingStaff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Services.OtherServiceTeachingStaff", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.Servicess.ServiceExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Services.OtherServiceTeachingStaff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.InvestmentExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.Special.SpecialExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Special.InvestmentExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.Expenses.Special.TransferExpenseModel", b =>
                {
                    b.HasOne("Api.Models.parameters.Expenses.Special.SpecialExpenseModel", null)
                        .WithOne()
                        .HasForeignKey("Api.Models.parameters.Expenses.Special.TransferExpenseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.parameters.CohortModel", b =>
                {
                    b.Navigation("Expense");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Api.Models.parameters.ProgramModel", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Api.Models.parameters.RegistrationModel", b =>
                {
                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Models.parameters.StudentModel", b =>
                {
                    b.Navigation("Discount");
                });
#pragma warning restore 612, 618
        }
    }
}
